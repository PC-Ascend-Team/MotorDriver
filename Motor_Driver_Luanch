//Code created by Jake Denison
//Version 4.0
//PC NASA ASCEND TEAM
///////////////////////////////////////////

#include <Wire.h>

//Define all the pins for the motors
int fwdPin = 11; //foward pin
int revPin = 10; //reverse pin
int motor1Pin = 3; //first motor
int motor2Pin = 4; //second motor
int motor3Pin = 5; //third motor
int motor4Pin = 6; //fourth motor
int motor5Pin = 7; //fifth motor
int i;
int motorSelect;
char sCode = '\0';
boolean sampled = true; // because we don't want to sample off the bat

void driveMotor(int motorNum); // forward declaration, for compiler

///////////////////////////////////////////

void setup(){
  
//set output pins
  for (int i = 3; i < 8; i++ ){ // set pins 3 - 7 to output for each motor enable
    pinMode(i, OUTPUT);
  }  
  
  pinMode(fwdPin, OUTPUT); 
  pinMode(revPin, OUTPUT);

  Wire.begin(9);
  Wire.onReceive(receiveEvent);
  Wire.onRequest(requestEvent);
}
///////////////////////////////////////////////////////

void loop() {
  switch (sCode){
    case '0':
      if(!sampled)
        driveMotor (motor1Pin);
      break;
    case '1':
      if(!sampled)
        driveMotor (motor2Pin);
      break;
    case '2':
      if(!sampled)
        driveMotor (motor3Pin);
      break;
    case '3':
      if(!sampled)
        driveMotor (motor4Pin);
      break;
    case '4':
      if(!sampled)
        driveMotor (motor5Pin);
      break;
    default:
      break;
  }
}
///////////////////////////////////////////////////
void driveMotor(int motorNum){
  sampled = true; //Sets case to true, so it does not do it twice
  int fwdDel(120000); 
  digitalWrite(motorNum, HIGH); //enable first selected motor
  digitalWrite(fwdPin, HIGH); //begin sample collection
  digitalWrite(revPin, LOW); 
  delay(fwdDel); //sample collection completed
  digitalWrite(fwdPin, LOW);
  digitalWrite(revPin, LOW); //shutdown
}
///////////////////////////////////////////////////
/*
 * recieveEvent reads bytes sent from the master controller, appends 
 * it to the message string and then marks a message recieved if it
 * is the last message
 */
void receiveEvent(int nBytes) {
  sCode = Wire.read();
  sampled = false;
}

/*
 * requestEvent sends the sCode back to the master controller
 */
void requestEvent() {
  Wire.write(sCode);
  Wire.write(sampled);
}
